from core.management.commands.base_seed import BaseSeedCommand
from accounts.models import User, Patient, Work, Session
from accounts.enums.gender import Gender
from accounts.enums.permission_role import PermissionRole
from health_unit.models import HealthUnit
from address.models import Address
from datetime import timedelta


class Command(BaseSeedCommand):
    seed_name = "accounts"
    seed_description = "Usu√°rios, pacientes, trabalhos e sess√µes"
    help = "Seed accounts app with realistic test data using Faker"

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument(
            "--users",
            type=int,
            default=50,
            help="Number of users to create (default: 50)",
        )
        parser.add_argument(
            "--patients",
            type=int,
            default=30,
            help="Number of patients to create (default: 30)",
        )
        parser.add_argument(
            "--works",
            type=int,
            default=20,
            help="Number of work assignments to create (default: 20)",
        )
        parser.add_argument(
            "--sessions",
            type=int,
            default=15,
            help="Number of sessions to create (default: 15)",
        )

    def handle_seed(self, fake, *args, **options):
        """Executa o seed do app accounts"""
        # Verificar depend√™ncias
        if not Address.objects.exists():
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå Nenhum endere√ßo encontrado. Execute "python manage.py seed_addresses" primeiro.'
                )
            )
            return {"erro": "Depend√™ncias n√£o encontradas"}

        if not HealthUnit.objects.exists():
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå Nenhuma unidade de sa√∫de encontrada. Execute "python manage.py seed_health_units" primeiro.'
                )
            )
            return {"erro": "Depend√™ncias n√£o encontradas"}

        # Criar usu√°rios
        users = self._create_users(fake, options["users"])

        # Criar pacientes
        patients = self._create_patients(fake, users, options["patients"])

        # Criar trabalhos
        works = self._create_works(fake, users, options["works"])

        # Criar sess√µes
        sessions = self._create_sessions(fake, users, options["sessions"])

        return {
            "usu√°rios": len(users),
            "pacientes": len(patients),
            "trabalhos": len(works),
            "sess√µes": len(sessions),
        }

    def _clear_data(self, options):
        """Limpa dados existentes das tabelas do app accounts"""
        self.stdout.write("üßπ Limpando dados existentes...")

        session_count = Session.objects.count()
        work_count = Work.objects.count()
        patient_count = Patient.objects.count()
        user_count = User.objects.filter(is_superuser=False).count()

        Session.objects.all().delete()
        Work.objects.all().delete()
        Patient.objects.all().delete()
        User.objects.filter(is_superuser=False).delete()  # Preservar superusu√°rios

        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Dados removidos: {user_count} usu√°rios, {patient_count} pacientes, "
                f"{work_count} trabalhos, {session_count} sess√µes"
            )
        )

    def _create_users(self, fake, count):
        """Cria usu√°rios com dados realistas"""
        self.stdout.write(f"üë• Criando {count} usu√°rios...")

        users = []
        addresses = list(Address.objects.all())

        for i in range(count):
            # Gerar CPF v√°lido (formato simples para teste)
            cpf = fake.cpf().replace(".", "").replace("-", "")

            # Garantir que o CPF seja √∫nico
            max_attempts = 10
            attempts = 0
            while User.objects.filter(cpf=cpf).exists() and attempts < max_attempts:
                cpf = fake.cpf().replace(".", "").replace("-", "")
                attempts += 1

            if attempts >= max_attempts:
                continue  # Pular se n√£o conseguir CPF √∫nico

            user = User(
                cpf=cpf,
                name=fake.name(),
                email=fake.email() if fake.boolean(chance_of_getting_true=80) else "",
                address=fake.random_element(addresses)
                if addresses and fake.boolean(chance_of_getting_true=70)
                else None,
                is_active=fake.boolean(chance_of_getting_true=95),
                is_staff=fake.boolean(chance_of_getting_true=10),
            )
            user.set_password("senha123")  # Senha padr√£o para testes
            users.append(user)

        try:
            User.objects.bulk_create(users, ignore_conflicts=True)
            created_users = User.objects.filter(cpf__in=[u.cpf for u in users])

            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ {created_users.count()} usu√°rios criados!")
            )
            return list(created_users)
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro ao criar usu√°rios: {e}"))
            return []

    def _create_patients(self, fake, users, count):
        """Cria perfis de pacientes para alguns usu√°rios"""
        if not users:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  Nenhum usu√°rio dispon√≠vel para criar pacientes")
            )
            return []

        self.stdout.write(f"üè• Criando {count} pacientes...")

        if count > len(users):
            count = len(users)
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  Reduzindo n√∫mero de pacientes para {count} (limitado pelo n√∫mero de usu√°rios)"
                )
            )

        # Selecionar usu√°rios aleat√≥rios que ainda n√£o s√£o pacientes
        available_users = [u for u in users if not hasattr(u, "patient_profile")]
        if not available_users:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  Todos os usu√°rios j√° s√£o pacientes")
            )
            return []

        selected_users = fake.random_elements(
            available_users, length=min(count, len(available_users)), unique=True
        )

        patients = []
        for user in selected_users:
            # Gerar n√∫mero SUS √∫nico
            sus_number = str(
                fake.random_int(min=100_000_000_000_000, max=999_999_999_999_999)
            )
            max_attempts = 10
            attempts = 0
            while (
                Patient.objects.filter(sus_number=sus_number).exists()
                and attempts < max_attempts
            ):
                sus_number = str(
                    fake.random_int(min=100_000_000_000_000, max=999_999_999_999_999)
                )
                attempts += 1

            if attempts >= max_attempts:
                continue  # Pular se n√£o conseguir SUS √∫nico

            # Gerar telefone
            phone = (
                fake.phone_number()
                .replace("(", "")
                .replace(")", "")
                .replace("-", "")
                .replace(" ", "")[:15]
            )

            # Data de nascimento realista
            birth_date = fake.date_of_birth(minimum_age=0, maximum_age=100)

            patient = Patient(
                user=user,
                sus_number=sus_number,
                phone_number=phone,
                gender=fake.random_element([choice[0] for choice in Gender.choices]),
                other_gender=fake.word()
                if fake.boolean(chance_of_getting_true=5)
                else None,
                date_of_birth=birth_date,
            )
            patients.append(patient)

        try:
            Patient.objects.bulk_create(patients, ignore_conflicts=True)

            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ {len(patients)} pacientes criados!")
            )
            return patients
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro ao criar pacientes: {e}"))
            return []

    def _create_works(self, fake, users, count):
        """Cria registros de trabalho para usu√°rios"""
        if not users:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  Nenhum usu√°rio dispon√≠vel para criar trabalhos")
            )
            return []

        self.stdout.write(f"üíº Criando {count} trabalhos...")

        health_units = list(HealthUnit.objects.all())
        if not health_units:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è  Nenhuma unidade de sa√∫de dispon√≠vel para criar trabalhos"
                )
            )
            return []

        works = []
        for i in range(count):
            user = fake.random_element(users)
            health_unit = fake.random_element(health_units)

            # Evitar duplicatas de usu√°rio + unidade de sa√∫de
            if Work.objects.filter(user=user, health_unit=health_unit).exists():
                continue

            # Datas de trabalho realistas
            start_date = fake.date_between(start_date="-2y", end_date="today")
            end_date = fake.date_between(
                start_date=start_date, end_date=start_date + timedelta(days=365 * 2)
            )

            work = Work(
                user=user,
                health_unit=health_unit,
                permission_role=fake.random_element(
                    [choice[0] for choice in PermissionRole.choices]
                ),
                start_date=start_date,
                end_date=end_date,
            )
            works.append(work)

        try:
            Work.objects.bulk_create(works, ignore_conflicts=True)

            self.stdout.write(self.style.SUCCESS(f"‚úÖ {len(works)} trabalhos criados!"))
            return works
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro ao criar trabalhos: {e}"))
            return []

    def _create_sessions(self, fake, users, count):
        """Cria sess√µes de trabalho para usu√°rios"""
        if not users:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  Nenhum usu√°rio dispon√≠vel para criar sess√µes")
            )
            return []

        self.stdout.write(f"‚è∞ Criando {count} sess√µes...")

        sessions = []
        for i in range(count):
            user = fake.random_element(users)

            # Hor√°rios de trabalho realistas
            start_hour = fake.random_int(min=6, max=18)  # 6h √†s 18h
            start_minute = fake.random_element([0, 15, 30, 45])

            end_hour = start_hour + fake.random_int(
                min=1, max=8
            )  # 1 a 8 horas de trabalho
            if end_hour > 23:
                end_hour = 23
            end_minute = fake.random_element([0, 15, 30, 45])

            session = Session(
                user_id=user,
                start=fake.time_object().replace(hour=start_hour, minute=start_minute),
                end=fake.time_object().replace(hour=end_hour, minute=end_minute),
            )
            sessions.append(session)

        try:
            Session.objects.bulk_create(sessions, ignore_conflicts=True)

            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ {len(sessions)} sess√µes criadas!")
            )
            return sessions
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erro ao criar sess√µes: {e}"))
            return []
