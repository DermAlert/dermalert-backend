# -*- coding: utf-8 -*-
"""
Management command que popula ChronicDisease, Medicine e Allergy
com listas de exemplos comuns em portugu√™s.
"""

from core.management.commands.base_seed import BaseSeedCommand
from profile_forms.models import ChronicDisease, Medicine, Allergy


CHRONIC_DISEASES = [
    # 40 exemplos frequentes
    "Hipertens√£o arterial",
    "Diabetes mellitus tipo 1",
    "Diabetes mellitus tipo 2",
    "Asma br√¥nquica",
    "Doen√ßa pulmonar obstrutiva cr√¥nica (DPOC)",
    "Insufici√™ncia card√≠aca",
    "Doen√ßa arterial coronariana",
    "Arritmia card√≠aca",
    "Doen√ßa renal cr√¥nica",
    "Doen√ßa hep√°tica cr√¥nica",
    "Doen√ßa de Alzheimer",
    "Doen√ßa de Parkinson",
    "Artrite reumatoide",
    "Osteoartrite",
    "L√∫pus eritematoso sist√™mico",
    "Esclerose m√∫ltipla",
    "Hipotireoidismo",
    "Hipertireoidismo",
    "Doen√ßa cel√≠aca",
    "Fibrose c√≠stica",
    "Fibromialgia",
    "Depress√£o maior",
    "Transtorno bipolar",
    "Transtorno de ansiedade generalizada",
    "Epilepsia",
    "Doen√ßa de Crohn",
    "Retocolite ulcerativa",
    "Gota",
    "Anemia falciforme",
    "Talassemia",
    "Hemofilia",
    "HIV/Aids",
    "C√¢ncer de mama (cr√¥nico)",
    "C√¢ncer de pr√≥stata (cr√¥nico)",
    "C√¢ncer colorretal (cr√¥nico)",
    "Es√¥fago de Barrett",
    "Doen√ßa arterial perif√©rica",
    "Glaucoma",
    "Catarata",
    "Psor√≠ase",
]

MEDICINES = [
    # 50 f√°rmacos largamente prescritos no Brasil
    "Paracetamol",
    "Dipirona s√≥dica",
    "Ibuprofeno",
    "√Åcido acetilsalic√≠lico",
    "Amoxicilina",
    "Azitromicina",
    "Cefalexina",
    "Ciprofloxacino",
    "Metformina",
    "Glibenclamida",
    "Insulina humana NPH",
    "Insulina glargina",
    "Enalapril",
    "Losartana pot√°ssica",
    "Atenolol",
    "Amlodipino",
    "Furosemida",
    "Hidroclorotiazida",
    "Sinvastatina",
    "Rosuvastatina",
    "Omeprazol",
    "Pantoprazol",
    "Ranitidina",
    "Salbutamol (aerossol)",
    "Budesonida + formoterol",
    "Beclometasona",
    "Prednisona",
    "Hidrocortisona",
    "Loratadina",
    "Cetirizina",
    "Desloratadina",
    "Nimesulida",
    "Diclofenaco s√≥dico",
    "Celecoxibe",
    "Clopidogrel",
    "Varfarina s√≥dica",
    "Heparina",
    "Sertralina",
    "Fluoxetina",
    "Citalopram",
    "Risperidona",
    "Quetiapina",
    "Haloperidol",
    "Carbamazepina",
    "Fenito√≠na",
    "√Åcido valpr√≥ico",
    "Levodopa + benserazida",
    "Alendronato de s√≥dio",
    "Colecalciferol (vitamina D)",
]

ALLERGIES = [
    # 30 al√©rgenos ou grupos de al√©rgenos comuns
    "Leite de vaca",
    "Ovo",
    "Amendoim",
    "Soja",
    "Trigo/gl√∫ten",
    "Frutos do mar",
    "Crust√°ceos",
    "Peixes",
    "Nozes",
    "Castanha de caju",
    "Castanha do Brasil",
    "Pistache",
    "Am√™ndoa",
    "L√°tex",
    "Penicilina",
    "Cefalosporinas",
    "Sulfametoxazol-trimetoprim",
    "Nimesulida",
    "√Åcido acetilsalic√≠lico (AAS)",
    "Dipirona",
    "Corantes alimentares",
    "Conservantes (sulfitos)",
    "√Åcaros",
    "P√≥len",
    "Pelos de gato",
    "Pelos de cachorro",
    "Fungos (mofo)",
    "Picada de abelha",
    "Picada de formiga (fogo)",
    "N√≠quel",
]


class Command(BaseSeedCommand):
    seed_name = "health_catalogs"
    seed_description = "Cat√°logos de sa√∫de (doen√ßas, medicamentos, alergias)"
    help = "Popula ChronicDisease, Medicine e Allergy com listas padr√£o em portugu√™s."

    def handle_seed(self, fake, *args, **options):
        """Executa o seed dos cat√°logos de sa√∫de"""
        chronic_diseases = self._bulk_seed(
            ChronicDisease, CHRONIC_DISEASES, "Doen√ßas cr√¥nicas"
        )
        medicines = self._bulk_seed(Medicine, MEDICINES, "Medicamentos")
        allergies = self._bulk_seed(Allergy, ALLERGIES, "Alergias")

        return {
            "doen√ßas cr√¥nicas": chronic_diseases,
            "medicamentos": medicines,
            "alergias": allergies,
        }

    def _clear_data(self, options):
        """Limpa cat√°logos existentes"""
        self.stdout.write("üßπ Removendo cat√°logos existentes...")

        chronic_count = ChronicDisease.objects.count()
        medicine_count = Medicine.objects.count()
        allergy_count = Allergy.objects.count()

        ChronicDisease.objects.all().delete()
        Medicine.objects.all().delete()
        Allergy.objects.all().delete()

        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Cat√°logos removidos: {chronic_count} doen√ßas, "
                f"{medicine_count} medicamentos, {allergy_count} alergias"
            )
        )

    def _bulk_seed(self, model, items, label):
        """Cria itens em lote para um modelo espec√≠fico"""
        self.stdout.write(f"üìã Criando {label.lower()}...")

        try:
            created_objects = model.objects.bulk_create(
                [model(name=name) for name in items],
                ignore_conflicts=True,
            )

            # Contar quantos realmente foram criados
            total_existing = model.objects.filter(name__in=items).count()

            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ {label}: {total_existing} total "
                    f"({len(created_objects)} novos, {total_existing - len(created_objects)} j√° existiam)"
                )
            )

            return total_existing

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erro ao criar {label.lower()}: {e}")
            )
            return 0
