"""Management command para popular cat√°logos relacionados ao FamilyHistory.

Inclui:
 - Relatives (graus/parentes de hist√≥rico familiar)
 - CancerTypes (tipos comuns de c√¢ncer)
 - InjuriesTreatment (tratamentos/remo√ß√µes de les√µes)

Uso:
    python manage.py seed_family_history_catalogs

Op√ß√µes √∫teis:
    --clear        Remove todos os registros antes de inserir
    --verbose-seed Mostra detalhes de configura√ß√£o do seed
"""

from core.management.commands.base_seed import BaseSeedCommand
from profile_forms.models import Relatives, CancerTypes, InjuriesTreatment


PARENTS = [
    # Parentes de primeiro e segundo grau mais usuais em anamnese oncol√≥gica
    "M√£e",
    "Pai",
    "Irm√£",
    "Irm√£o",
    "Filha",
    "Filho",
    "Av√≥ materna",
    "Av√¥ materno",
    "Av√≥ paterna",
    "Av√¥ paterno",
    "Tia materna",
    "Tio materno",
    "Tia paterna",
    "Tio paterno",
    "Prima de primeiro grau",
    "Primo de primeiro grau",
    "Sobrinha",
    "Sobrinho",
    "Bisav√≥",
    "Bisav√¥",
    "Outros",
]

CANCER_TYPES = [
    "Melanoma",
    "Carinoma Basocelular",
    "Carinoma Espinocelular",
]

INJURIES_TREATMENTS = [
    # Tratamentos/abordagens comuns para les√µes / neoplasias cut√¢neas
    "Cirurgia excisional",
    "Bi√≥psia excisional",
    "Curetagem",
    "Curetagem e eletrocoagula√ß√£o",
    "Crioterapia",
    "Eletrocauteriza√ß√£o",
    "Laser",
    "Radioterapia",
    "Quimioterapia sist√™mica",
    "Quimioterapia t√≥pica",
    "Imunoterapia",
    "Terapia alvo",
    "Observa√ß√£o/Follow-up",
    "Outros",
]


class Command(BaseSeedCommand):
    seed_name = "family_history_catalogs"
    seed_description = "Cat√°logos de hist√≥rico familiar (parentes, tipos de c√¢ncer, tratamentos de les√µes)"
    help = "Popula Relatives, CancerTypes e InjuriesTreatment com listas padr√£o."

    def handle_seed(self, fake, *args, **options):  # noqa: ARG002
        relatives = self._bulk_seed(Relatives, PARENTS, "Parentes")
        cancer_types = self._bulk_seed(CancerTypes, CANCER_TYPES, "Tipos de c√¢ncer")
        treatments = self._bulk_seed(InjuriesTreatment, INJURIES_TREATMENTS, "Tratamentos de les√µes")
        return {
            "relatives": relatives,
            "cancer_types": cancer_types,
            "injuries_treatments": treatments,
        }

    def _clear_data(self, options):  # noqa: ARG002
        self.stdout.write("üßπ Removendo cat√°logos de hist√≥rico familiar existentes...")
        relatives_count = Relatives.objects.count()
        cancer_count = CancerTypes.objects.count()
        treatments_count = InjuriesTreatment.objects.count()
        Relatives.objects.all().delete()
        CancerTypes.objects.all().delete()
        InjuriesTreatment.objects.all().delete()
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Cat√°logos removidos: {relatives_count} parentes, {cancer_count} tipos de c√¢ncer, {treatments_count} tratamentos"
            )
        )

    def _bulk_seed(self, model, items, label):  # noqa: D401
        """Cria itens em lote para um modelo listado."""
        self.stdout.write(f"üìã Criando {label.lower()}...")
        try:
            created_objects = model.objects.bulk_create(
                [model(name=name) for name in items],
                ignore_conflicts=True,
            )
            total_existing = model.objects.filter(name__in=items).count()
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ {label}: {total_existing} total ("
                    f"{len(created_objects)} novos, {total_existing - len(created_objects)} j√° existiam)"
                )
            )
            return total_existing
        except Exception as e:  # pragma: no cover - logging de erro
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erro ao criar {label.lower()}: {e}")
            )
            return 0
